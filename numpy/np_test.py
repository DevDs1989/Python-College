import numpy as np

a = np.array([1, 2, 3, 4, 5])
print(f"ndim: {a.ndim}")
print(f"size: {a.size}")
print(f"dtype: {a.dtype}")
print(f"shape: {a.shape}")
print(f"itemsize: {a.itemsize}")
b = 2
c = a + b
print(f"Broadcasting: {c}")

a = np.array([3, 2, 1, 4, 5])
print(f"Sort: {np.sort(a)}")
a = np.full((3, 3), 5)
print(f"Full: {a}")
a = np.zeros((3, 3))
print(f"Zeros: {a}")
b = np.ones((3, 3))
print(f"Ones: {b}")
a = np.array([1, 2, 3, 4, 5])
print(f"Search Sorted: {np.searchsorted(a, 3)}")
a = np.array([1, 2, 3, 4, 5, 6])
print(f"Reshape: {a.reshape(2, -1)}")
a = np.array([[1, 2, 3], [4, 5, 6]])
print(f"Slice: {a[:3,1:]}")
print(f"Slice 2 : {a[[1,0],:]}")
a = np.array([[1, 2, 3], [4, 5, 6]])
a = np.array([1, 2, 3])
print(f"Expand dims: {np.expand_dims(a, axis=1)}")
a = np.array([1, 2, 3])
b = a.copy()
print(f"Copy: {b}")
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
print(f"vstack: {np.vstack((a, b))}")
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
print(f"hstack: {np.hstack((a, b))}")
a = np.array([1.1, 2.2, 3.3])
print(f"Round: {np.round(a)}")
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
c = np.concatenate((a, b))
print(f"Concatenate: {c}")
a = np.array([1.1, 2.2, 3.3])
print(f"Floor: {np.floor(a)}")
a = np.array([1.1, 2.2, 3.3])
print(f"Ceil: {np.ceil(a)}")
a = np.array([1.1, 2.2, 3.3])
print(f"Trunc: {np.trunc(a)}")

a = np.array([1, 2, 3])
print(f"Prod: {np.prod(a)}")

a = np.array([1, 2, 3])
print(f"Mean: {np.mean(a)}")

a = np.array([1, 2, 3])
print(f"Median: {np.median(a)}")
b = np.array([2, 3, 4])
print(f"Intersect1d: {np.intersect1d(a, b)}")
a = np.array([1, 2, 3])
print(f"Where: {np.where(a == 2)}")
print(f"Random: {np.random.random()}")
print(f"Random Uniform: {np.random.uniform()}")
a = np.array([1, 2, 3])
print(f"Cumsum: {np.cumsum(a)}")
a = np.array([1, 2, 3])
print(f"Cumprod: {np.cumprod(a)}")
a = np.array([1, 2, 3, 4, 5])
print(f"Indexing: {a[1]}")
print(f"Slicing: {a[2:]}")
a = np.array([[1, 2, 3], [4, 5, 6]])
print(f"Reverse row: {a[::-1]}")
a = np.array([[1, 2, 3], [4, 5, 6]])
print(f"Reverse column: {a[:, ::-1]}")
